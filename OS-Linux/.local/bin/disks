#!/bin/bash

# üÖ≤ üÖ∑ üÖ∞ üÖΩ üÖ≥ üÖ¥ üÜÅ
# ---------------------------------------
# Prints information about attached disks

NEWLINE=$'\n'
DISK_SECTION=""

have_cmd() { command -v "$1" >/dev/null 2>&1; }

print_blocks_for_disk() {
  local disk_basename="$1"   # e.g., sda or nvme0n1
  if ! have_cmd lsblk -e 7 -o NAME,SIZE,FSTYPE,MOUNTPOINT; then
    printf "          ‚îî‚îÄ (lsblk not found; cannot enumerate blocks)\n"
    return
  fi

  local any_child=0
  while read -r name fstype size used avail usep mnt; do

    printf "          ‚îÇ  ‚îî‚îÄ %-14s FS: %-8s Mount: %-24s Size: %-8s Used:%s\n" \
          "${name}" "${fstype}" "${mnt}" "${size}" "${usep}"
  done < <(df -Th | grep -Ev '^Filesystem|tmpfs|devtmpfs|overlay|efivars' | grep "/dev/${disk_basename}" 2>/dev/null)

}


processDiskSection() {
  if [ -z "${DISK_SECTION}" ]; then
    # Section is empty; Nothing to print
    return
  fi

  SIZE="$(printf "$DISK_SECTION" | grep -w size | cut -d: -f2 | xargs | cut -d "(" -f2 | cut -d ")" -f1)"
  if [ -z "${SIZE}" ]; then
    # Size is empty; Nothing to print
    return
  fi

  SIZE_METRIC="$(echo $SIZE | tr -d -c 0-9)"

  RESIZED=false
  if [ "$SIZE_METRIC" -gt "999" ]; then
    SIZE_METRIC="$(echo "scale=1; $SIZE_METRIC/1000" | bc)"
    RESIZED=true
  fi

  SIZE_UNIT="$(echo $SIZE | sed 's/[0-9]//g')"

  if [ "${SIZE_UNIT}" = "GiB" ] || [ "${SIZE_UNIT}" = "GB" ]; then  

    if [ "$RESIZED" = true ] ; then
      SIZE_UNIT="TB"
    
    elif [ "${SIZE_UNIT}" = "GiB" ]; then
      SIZE_UNIT="GB"
    fi

  elif [ "${SIZE_UNIT}" = "MB" ]; then  

    if [ "$RESIZED" = true ] ; then
      SIZE_UNIT="GB"
    fi
  fi

  MAKE="$(printf "$DISK_SECTION" | grep -w vendor | cut -d: -f2 | xargs)"
  if [ -n "${MAKE}" ]; then
    MAKE+=" / "
  fi

  MAKE+="$(printf "$DISK_SECTION" | grep -w product | cut -d: -f2 | xargs)"
  
  TYPE="$(printf "$DISK_SECTION" | grep -w description | cut -d: -f2 | xargs)"
  NAME="$(printf "$DISK_SECTION" | grep -w 'logical name' | cut -d: -f2 | xargs)"
 
  printf "\n [‚óè ‚ñ™‚ñ™ ‚óè] ‚îÇ $MAKE\n"
  printf "          ‚îÇ $SIZE_METRIC $SIZE_UNIT / $TYPE\n"
  printf "          ‚îÇ $NAME\n"

  print_blocks_for_disk "$(basename -- "$NAME")"
}

# --------- SHOWTIME!
DISKS_OUTPUT="$(sudo lshw -C disk)"

while IFS= read -r LINE;
do
  if [[ $LINE == "  *-"* ]]; then
    processDiskSection
    DISK_SECTION=""

  else
    DISK_SECTION+="${NEWLINE}${LINE}"
  fi

done <<< "$(echo "$DISKS_OUTPUT")"

# Process final disk section
processDiskSection
